
-- identidad
def id = \x . x 

-- Booleanos
def true = \ t f . t
def false = \t f . f
def ifthenelse = id

def not      = \a . ifthenelse a false true 
def and      = \a b. a b false
def or       = \a b. a true b
def booleq   = \a b. ifthenelse a b (ifthenelse b false true) 
def xor      = \a b. not (booleq a b)
def implica  = \a b. or (not a) b 


-- Pares
def pair = \x y p . p x y 
def fst = \p . p true     
def snd = \p . p false


-- Numerales de Church
def zero = \s z . z
def suc = \n s z . s (n s z)

def is0 = \n . n (\ x . false) true

def add = \n m s z . n s (m s z)
def mult = \n m s z . n (m s) z

def pred = \ n . fst (n (\p . pair (snd p) (suc (snd p))) (pair zero zero))



-- Either
-- either :: Either a b -> (a -> c) -> (b -> c) -> c
def either = id
def left   = \ a f g . f a
def right  = \ b f g . g b


--Listas
def nil = \c n . n
def cons = \x xs c n . c x (xs c n)

def isnil = \xs . xs (\x ys . false) true

-- Combinador de Punto Fijo
def Y = \f . (\x . f (x x)) (\x . f (x x))

-- factorial
def fact = Y (\f n. (is0 n) (suc zero) (mult n (f (pred n))))

-- bottom
def bottom = (\x . x x) (\x . x x)

----------------------------------------------------------------------------


def H       = \ p . ifthenelse (is0 (fst p)) (pair (suc zero) (f (snd p))) (pair zero (snd p))
def exprara = \ n f x . snd (n (\ p . ifthenelse (is0 (fst p)) (pair (suc zero) (f (snd p))) (pair zero (snd p))) (pair (suc zero) x))

-- H :: (Int, a) -> (Int, a)
-- H (0,x)  = (1,f x)
-- H (n,x)  = (0, x )


-- dado un  natural n , un x y una funcion: aplico (div n 2) veces la funcion H a (1,x)
-- equivale a, dado un natural una funcion y un x;   a   [n/2] f x 
